package model;

import java.io.IOException;

/**
 * Given the top five vehicles, this class will hold associated satisfaction ratings
 * Upon the top five list being constructed, the class will be constructed, and will hold
 * the top five auto makers, and their associated consumer satisfaction ratings. These ratings
 * are generated by dividing the number of positives ("good") by total number of ratings
 * 
 * @author Nolan Slade
 * @version 1.0
 */
public class SatisfactionData {
	private static StringGraph vehicleGraph;
	private String[] automakers;
	private double[] ratings;
	private static final int RESULTSIZE = 5;
	
	/**
	 * Given a list of the top five auto makers, will generate user satisfaction for each through graph processing
	 * The constructor will
	 * 
	 * @param am The String array of auto makers to be analyzed
	 * @throws IOException If an error occurs with constructing the graph from the text file
	 */
	public SatisfactionData(String[] am) throws IOException {
		automakers = null;
		automakers = am;
		
		// Instantiate graph here
		vehicleGraph = null;
		vehicleGraph = new StringGraph("data/automakerGraph.txt");
		
		// New array to contain rating information
		assert(am.length == RESULTSIZE);
		ratings = new double[RESULTSIZE]; 
		
		// Assign a rating to each of the auto makers by analyzing the graph's nodes
		for (int i = 0; i < am.length; i++) {
			// Fix for if there are 0 < vehicles found < 5, just assign 0 if that is the case
			if (am[i] == null) {
				ratings[i] = 0.0;
			} else {
				ratings[i] = analyzeAutomaker(automakers[i]);
			}
		}
	}
	
	/**
	 * Will return the current set of auto makers that were analyzed
	 * 
	 * @return The array of String values representing the auto makers which were/are to be analyzed
	 */
	public String[] getAutomakers() {
		return automakers;
	}
	
	
	/**
	 * Will return an array of double values representing a % satisfaction rating
	 * 
	 * @return The array of double values representing the corresponding auto makers' satisfaction ratings
	 */
	public double[] getRatings() {
		return ratings;
	}
	
	
	/**
	 * Will calculate the approximate user satisfaction with a particular auto maker
	 * The function will conduct synthesized sentimental analysis on a bipartite graph database
	 * and will represent user satisfaction with a floating point rating (higher rating = higher satisfaction)
	 * 
	 * @param automaker The auto maker to be analyzed
	 * @return A floating point representation of the % satisfaction of users with the given auto maker
	 */
	public static double analyzeAutomaker(String automaker) {
		return analyze(automaker);
	}
	
	private static double analyze(String automaker) {
		return (StringGraph.getRating(vehicleGraph, automaker));
	}
}
